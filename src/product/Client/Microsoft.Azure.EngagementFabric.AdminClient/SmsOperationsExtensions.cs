// <auto-generated>
// Copyright (c) Microsoft Corporation.// Licensed under the MIT license.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.EngagementFabric.AdminClient
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SmsOperations.
    /// </summary>
    public static partial class SmsOperationsExtensions
    {
            /// <summary>
            /// Get account (SMS)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='account'>
            /// Name of CEF account
            /// </param>
            public static SmsAccount GetAccount(this ISmsOperations operations, string apiVersion, string account)
            {
                return operations.GetAccountAsync(apiVersion, account).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get account (SMS)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='account'>
            /// Name of CEF account
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SmsAccount> GetAccountAsync(this ISmsOperations operations, string apiVersion, string account, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAccountWithHttpMessagesAsync(apiVersion, account, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or Update account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='update'>
            /// Account
            /// </param>
            public static SmsAccount CreateOrUpdateAccount(this ISmsOperations operations, string apiVersion, SmsAccount update)
            {
                return operations.CreateOrUpdateAccountAsync(apiVersion, update).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or Update account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='update'>
            /// Account
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SmsAccount> CreateOrUpdateAccountAsync(this ISmsOperations operations, string apiVersion, SmsAccount update, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateAccountWithHttpMessagesAsync(apiVersion, update, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get account credential assignments
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='account'>
            /// Name of CEF account
            /// </param>
            public static IList<SmsCredentialAssignment> GetCredentialAssignments(this ISmsOperations operations, string apiVersion, string account)
            {
                return operations.GetCredentialAssignmentsAsync(apiVersion, account).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get account credential assignments
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='account'>
            /// Name of CEF account
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SmsCredentialAssignment>> GetCredentialAssignmentsAsync(this ISmsOperations operations, string apiVersion, string account, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCredentialAssignmentsWithHttpMessagesAsync(apiVersion, account, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update account credential assignment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='account'>
            /// Name of CEF account
            /// </param>
            /// <param name='credentialAssignment'>
            /// Account credential assignment
            /// </param>
            public static IList<SmsCredentialAssignment> CreateOrUpdateCredentialAssignment(this ISmsOperations operations, string apiVersion, string account, SmsCredentialAssignment credentialAssignment)
            {
                return operations.CreateOrUpdateCredentialAssignmentAsync(apiVersion, account, credentialAssignment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update account credential assignment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='account'>
            /// Name of CEF account
            /// </param>
            /// <param name='credentialAssignment'>
            /// Account credential assignment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SmsCredentialAssignment>> CreateOrUpdateCredentialAssignmentAsync(this ISmsOperations operations, string apiVersion, string account, SmsCredentialAssignment credentialAssignment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateCredentialAssignmentWithHttpMessagesAsync(apiVersion, account, credentialAssignment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete credential assignment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='account'>
            /// Name of CEF account
            /// </param>
            /// <param name='provider'>
            /// Third party SMS provider
            /// </param>
            /// <param name='id'>
            /// AppId of third party SMS provider
            /// </param>
            public static void DeleteCredentialAssignment(this ISmsOperations operations, string apiVersion, string account, string provider, string id)
            {
                operations.DeleteCredentialAssignmentAsync(apiVersion, account, provider, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete credential assignment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='account'>
            /// Name of CEF account
            /// </param>
            /// <param name='provider'>
            /// Third party SMS provider
            /// </param>
            /// <param name='id'>
            /// AppId of third party SMS provider
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCredentialAssignmentAsync(this ISmsOperations operations, string apiVersion, string account, string provider, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCredentialAssignmentWithHttpMessagesAsync(apiVersion, account, provider, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update provider credential
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='credential'>
            /// Credential
            /// </param>
            public static SmsCredential CreateOrUpdateCredential(this ISmsOperations operations, string apiVersion, SmsCredential credential)
            {
                return operations.CreateOrUpdateCredentialAsync(apiVersion, credential).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update provider credential
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='credential'>
            /// Credential
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SmsCredential> CreateOrUpdateCredentialAsync(this ISmsOperations operations, string apiVersion, SmsCredential credential, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateCredentialWithHttpMessagesAsync(apiVersion, credential, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get provider credential
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='provider'>
            /// Third party SMS provider
            /// </param>
            /// <param name='id'>
            /// AppId of third party SMS provider
            /// </param>
            public static SmsCredential GetCredential(this ISmsOperations operations, string apiVersion, string provider, string id)
            {
                return operations.GetCredentialAsync(apiVersion, provider, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get provider credential
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='provider'>
            /// Third party SMS provider
            /// </param>
            /// <param name='id'>
            /// AppId of third party SMS provider
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SmsCredential> GetCredentialAsync(this ISmsOperations operations, string apiVersion, string provider, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCredentialWithHttpMessagesAsync(apiVersion, provider, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete provider credential
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='provider'>
            /// Third party SMS provider
            /// </param>
            /// <param name='id'>
            /// AppId of third party SMS provider
            /// </param>
            public static void DeleteCredential(this ISmsOperations operations, string apiVersion, string provider, string id)
            {
                operations.DeleteCredentialAsync(apiVersion, provider, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete provider credential
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='provider'>
            /// Third party SMS provider
            /// </param>
            /// <param name='id'>
            /// AppId of third party SMS provider
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCredentialAsync(this ISmsOperations operations, string apiVersion, string provider, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCredentialWithHttpMessagesAsync(apiVersion, provider, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update signature
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='account'>
            /// Name of CEF account
            /// </param>
            /// <param name='signature'>
            /// Signature
            /// </param>
            public static Signature CreateOrUpdateSignature(this ISmsOperations operations, string apiVersion, string account, Signature signature)
            {
                return operations.CreateOrUpdateSignatureAsync(apiVersion, account, signature).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update signature
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='account'>
            /// Name of CEF account
            /// </param>
            /// <param name='signature'>
            /// Signature
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Signature> CreateOrUpdateSignatureAsync(this ISmsOperations operations, string apiVersion, string account, Signature signature, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateSignatureWithHttpMessagesAsync(apiVersion, account, signature, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get signature
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='account'>
            /// Name of CEF account
            /// </param>
            /// <param name='signature'>
            /// Name of CEF signature
            /// </param>
            public static Signature GetSignature(this ISmsOperations operations, string apiVersion, string account, string signature)
            {
                return operations.GetSignatureAsync(apiVersion, account, signature).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get signature
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='account'>
            /// Name of CEF account
            /// </param>
            /// <param name='signature'>
            /// Name of CEF signature
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Signature> GetSignatureAsync(this ISmsOperations operations, string apiVersion, string account, string signature, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSignatureWithHttpMessagesAsync(apiVersion, account, signature, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update signature quota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='account'>
            /// Name of CEF account
            /// </param>
            /// <param name='signature'>
            /// Name of CEF signature
            /// </param>
            /// <param name='quota'>
            /// quota count
            /// </param>
            public static void CreateOrUpdateSignatureQuota(this ISmsOperations operations, string apiVersion, string account, string signature, int quota)
            {
                operations.CreateOrUpdateSignatureQuotaAsync(apiVersion, account, signature, quota).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update signature quota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='account'>
            /// Name of CEF account
            /// </param>
            /// <param name='signature'>
            /// Name of CEF signature
            /// </param>
            /// <param name='quota'>
            /// quota count
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateOrUpdateSignatureQuotaAsync(this ISmsOperations operations, string apiVersion, string account, string signature, int quota, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateOrUpdateSignatureQuotaWithHttpMessagesAsync(apiVersion, account, signature, quota, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete signature quota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='account'>
            /// Name of CEF account
            /// </param>
            /// <param name='signature'>
            /// Name of CEF signature
            /// </param>
            public static void DeleteSignatureQuota(this ISmsOperations operations, string apiVersion, string account, string signature)
            {
                operations.DeleteSignatureQuotaAsync(apiVersion, account, signature).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete signature quota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='account'>
            /// Name of CEF account
            /// </param>
            /// <param name='signature'>
            /// Name of CEF signature
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSignatureQuotaAsync(this ISmsOperations operations, string apiVersion, string account, string signature, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSignatureQuotaWithHttpMessagesAsync(apiVersion, account, signature, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='account'>
            /// Name of CEF account
            /// </param>
            /// <param name='template'>
            /// Name of template
            /// </param>
            /// <param name='signature'>
            /// Signature
            /// </param>
            public static Template UpdateTemplate(this ISmsOperations operations, string apiVersion, string account, string template, TemplateUpdateRequest signature)
            {
                return operations.UpdateTemplateAsync(apiVersion, account, template, signature).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='account'>
            /// Name of CEF account
            /// </param>
            /// <param name='template'>
            /// Name of template
            /// </param>
            /// <param name='signature'>
            /// Signature
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Template> UpdateTemplateAsync(this ISmsOperations operations, string apiVersion, string account, string template, TemplateUpdateRequest signature, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTemplateWithHttpMessagesAsync(apiVersion, account, template, signature, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
